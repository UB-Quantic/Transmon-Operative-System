# Author : Xabier Oyanguren Asua <oiangu9@gmail.com>
import numpy as np
import os as os

class PulseSequencetoTxtConversor:
    """This class, implementing the Soliton design pattern is specialy designed
    to generate txt files with the precise layout for the 'SingleQubit_Control_
    Externaly_Importable_Pulse_Seq' Labber driver.
    
    The main idea behind it is to give a Superconducting qubit engineer the
    ability to generate in a python Script a customized set of I,Q pulses
    for AWGs, in the form of numpy arrays which, thanks to this converter,may 
    then be interpreted by the mentioned Labber Signal Generating driver, that
    will ultimately send these pulse information to the actual AWG hardware.
    
    Parameters
    ---------
    outPutFileName: String
        This will be the name given by the conversort to the generated txt file
    outPutPath: String
        The full path in which th efile will be saved. Ideally it should concide
        with the mentioned custom driver's directory direction
        
    > by default the parameters are given the following values:
      - outPutFileName='Pulses_for_the_Signal_Generator'
      - outPutPath=the path where this script is, which should be following the
      readme: "C:\\Users\\UserName\\Labber\\Drivers\\SingleQubit_Control_Externaly_Importable_Pulse_Seq"
      
    such that the generated file will be:
      - "C:\\Users\\UserName\\Labber\\Drivers\\SingleQubit_Control_Externaly_Importable_Pulse_Seq\\Pulses_for_the_Signal_Generator.txt"
      
    """
    def __init__(self, outPutFileName='Pulses_for_the_Signal_Generator',\
                 outPutPath='default'):
        if outPutPath=='default':
            outPutPath = os.path.dirname(os.path.abspath(__file__))
        self.fullPathName = outPutPath+'\\'+outPutFileName+'.txt'
        
    def convertDicArraysToTxt(self, dictPulseSeq, filePathAndName='default'):
        """ Main method of the soliton that generates the txt file with the data
        of the input arrays in the correct format for the Labber driver 
        SingleQubit_Externally_Importable_Pulse_Seq.

        Arguments
        --------
        python dictionary with entries:
            'SampleRate': double
            'OutputNumber': integer
            'I1': numpyArray shape(m1,)
            'Q1': numpyArray shape(m1,)
            ....
            'Qn': numpyArray shape(mn,)
        
        - where SampleRate is the inverse of the time period per defined
        point in the arrays (ideally this should coincide with the sample
        rate of the arbitrary waveform generator AWG to be used);
        - mi is the maximum number of points in each array;
        - n must be equal to OutputNumber, where  nOutputNumber refers to
        the number of output IQ channels.

        Output
        ------
        The method generates (or overwrites) a txt with the following format:
        
        SampleRate <double_in_s^-1>
        OutputNumber <integer>
        I1 <double_1> <double_2> .... <double_m1>
        Q1 <double_1> <double_2> .... <double_m1>
        I2 <double_1> <double_2> .... <double_m2>
        Q2 <double_1> <double_2> .... <double_m2>
        ...
        In <double_1> <double_2> .... <double_mn>
        Qn <double_1> <double_2> .... <double_mn>

        """
        if filePathAndName == 'default':
            filePathAndName= self.fullPathName
        dataFile=open(filePathAndName,"w")
        dataFile.write("SampleRate "+str(dictPulseSeq['SampleRate'])+'\n')
        dataFile.write("OutputNumber "+str(dictPulseSeq['OutputNumber'])+'\n')
        for i in range(0,int(dictPulseSeq['OutputNumber'])):
            dataFile.write('I'+str(i+1)+' '+str(dictPulseSeq['I'+str(i+1)])[1:-1].replace('\n','').replace(',','')+'\n')
            dataFile.write('Q'+str(i+1)+' '+str(dictPulseSeq['Q'+str(i+1)])[1:-1].replace('\n','').replace(',','')+'\n')
        dataFile.close()
        
        
    def convertTxtToArrayDic(self, filePathAndName='default'):
        """Method intended for error prooving. It just reverts the actions of
        the convertDicArraysToTxt method, by taking a file with the layout that
        the mentioned method generates and returning a dictionary with the numpy
        array data.
        
        Arguments
        --------
        filePathAndName: String
            The full path of the file encoding the arrays. By default it will
            try to access the file generated by the other method.
        
        Outputs
        ------
        python dictionary with entries:
            'SampleRate': double
            'OutputNumber': integer
            'I1': numpyArray shape(m,)
            'Q1': numpyArray shape(m,)
            ....
            'Qn': numpyArray shape(m,)
        
        """
        if filePathAndName == 'default':
            filePathAndName= self.fullPathName
        data = open(filePathAndName,"r")
        dataDic={}
        for i,line in enumerate(data):
            name=''
            value=''
            j=0
            if i in [0,1]:
                while line[j]!=' ':
                    name+=line[j]
                    j+=1
                j+=1
                while line[j] not in ['\n',' ']:
                    value+=line[j]
                    j+=1
                dataDic[name] = float(value)
            else:
                while line[j]!=' ':
                    name+=line[j]
                    j+=1
                valueList=[]
                while line[j] !='\n':
                    value=''
                    j+=1
                    while line[j] not in ['\n',' ']:
                        value+=line[j]
                        j+=1
                    valueList.append(float(value))
                dataDic[name] = np.array(valueList)
        data.close()
        dataDic['OutputNumber'] = int(dataDic['OutputNumber'])
        return dataDic


